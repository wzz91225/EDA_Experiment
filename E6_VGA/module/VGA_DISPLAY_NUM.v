// =================================================================================================
// Copyright(C) 2019 - wzz91225 PERSON. All rights reserved.
// =================================================================================================

// =================================================================================================
// File Name        :   VGA_DISPLAY_NUM
// Module           :   VGA_DISPLAY_NUM
// Function         :   
// Type             :   RTL
// -------------------------------------------------------------------------------------------------
// Update History   :
// -------------------------------------------------------------------------------------------------
// Rev.Level    Date            Coded by            Contents
// 0.0.1        2019/12/20      wzz91225            Create new
// =================================================================================================
// End Revision
// =================================================================================================

// =================================================================================================
// Timescale Define
// =================================================================================================
`timescale 1 ps/1 ps


// =================================================================================================
// Module Header
// =================================================================================================

module VGA_DISPLAY_NUM (
	input						VGA_CLK					, // (i) vga clk in
	input						RST_N					, // (i) reset, High Active
	input						ENABLE					, // (i) 
	input						VGA_IF_RGBEN_1			, // (i) 
	input			[10:0]		POSITION_X				, // (i) 
	input			[10:0]		POSITION_Y				, // (i) 
	input			[10:0]		CURRENT_X				, // (i) 
	input			[10:0]		CURRENT_Y				, // (i) 
	input			[ 3:0]		NUMBER					, // (i) 
	output						COVER					, // (o) 
	output			[23:0]		VGA_BUF_RGB				  // (o) 
);


// =============================================================================
// Defination of parameter
// =============================================================================
	parameter		[10:0]		p_NUM_X					= 11'd16		;
	parameter		[10:0]		p_NUM_Y					= 11'd32		;

	parameter		[0:159]		p_NUM_00				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_01				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_02				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_03				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_04				= 160'b_0000000000000000_0000000000000000_0000000011000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_05				= 160'b_0000011111110000_0000000011000000_0000011111111000_0000011111111000_0000000000011100_0000111111111110_0000000001110000_0111111111111111_0000011111110000_0000111111110000	;
	parameter		[0:159]		p_NUM_06				= 160'b_0000111111111000_0000000111000000_0001111111111100_0000111111111100_0000000000111100_0000111111111110_0000000011110000_0111111111111111_0001111111111000_0001111111111000	;
	parameter		[0:159]		p_NUM_07				= 160'b_0001111000111100_0000001111000000_0001111000111100_0001111000011100_0000000000111100_0001111111111110_0000000011100000_0111111111111111_0001110000111100_0011111000111100	;
	parameter		[0:159]		p_NUM_08				= 160'b_0001110000011100_0000011111000000_0011100000001110_0001100000001110_0000000001111100_0001110000000000_0000000111000000_0000000000000110_0011100000001110_0011100000011110	;
	parameter		[0:159]		p_NUM_09				= 160'b_0011100000001110_0000111011000000_0011000000001110_0011100000001110_0000000011111100_0001100000000000_0000001111000000_0000000000001110_0011000000001110_0111000000001110	;
	parameter		[0:159]		p_NUM_10				= 160'b_0011100000001110_0001110011000000_0111000000001110_0011000000001110_0000000111011100_0001100000000000_0000001110000000_0000000000001100_0011000000001110_0111000000001110	;
	parameter		[0:159]		p_NUM_11				= 160'b_0011100000000110_0001100011000000_0000000000001110_0000000000001110_0000000111011100_0011100000000000_0000011100000000_0000000000011100_0011000000001110_0111000000001110	;
	parameter		[0:159]		p_NUM_12				= 160'b_0111000000000110_0001000011000000_0000000000001110_0000000000001110_0000001110011100_0011100000000000_0000011100000000_0000000000011000_0011100000001110_0111000000001110	;
	parameter		[0:159]		p_NUM_13				= 160'b_0111000000000111_0000000011000000_0000000000001110_0000000000011100_0000011100011100_0011111111110000_0000111011110000_0000000000111000_0011100000011100_0111000000001110	;
	parameter		[0:159]		p_NUM_14				= 160'b_0111000000000111_0000000011000000_0000000000011100_0000000000111000_0000011100011100_0011111111111000_0001111111111100_0000000000110000_0001111111111000_0111000000001110	;
	parameter		[0:159]		p_NUM_15				= 160'b_0111000000000111_0000000011000000_0000000000111100_0000000111110000_0000111000011100_0011100000111100_0001111111111110_0000000001110000_0000111111110000_0111000000011110	;
	parameter		[0:159]		p_NUM_16				= 160'b_0111000000000111_0000000011000000_0000000000111000_0000000111111000_0001110000011100_0111000000011110_0011110000001111_0000000001100000_0001111111111000_0011100000111100	;
	parameter		[0:159]		p_NUM_17				= 160'b_0111000000000111_0000000011000000_0000000001110000_0000000000111100_0001110000011100_0000000000001110_0011100000000111_0000000011100000_0011111000111100_0011111111111100	;
	parameter		[0:159]		p_NUM_18				= 160'b_0111000000000111_0000000011000000_0000000011110000_0000000000011110_0011100000011100_0000000000001110_0011100000000111_0000000011100000_0011100000001110_0000111111111000	;
	parameter		[0:159]		p_NUM_19				= 160'b_0111000000000111_0000000011000000_0000000011100000_0000000000001110_0111000000011100_0000000000000111_0111000000000011_0000000111000000_0111000000001110_0000001111111000	;
	parameter		[0:159]		p_NUM_20				= 160'b_0111000000000110_0000000011000000_0000000111000000_0000000000001110_0110000000011100_0000000000000111_0111000000000011_0000000111000000_0111000000000111_0000000001110000	;
	parameter		[0:159]		p_NUM_21				= 160'b_0011100000000110_0000000011000000_0000001110000000_0000000000000110_1111111111111111_0000000000000110_0111000000000011_0000000110000000_0111000000000111_0000000011110000	;
	parameter		[0:159]		p_NUM_22				= 160'b_0011100000001110_0000000011000000_0000011100000000_0111000000000110_1111111111111111_0110000000001110_0011000000000111_0000001110000000_0111000000000111_0000000011100000	;
	parameter		[0:159]		p_NUM_23				= 160'b_0011100000001110_0000000011000000_0000111100000000_0011100000001110_0000000000011100_0111000000001110_0011100000000111_0000001110000000_0111000000000111_0000000111000000	;
	parameter		[0:159]		p_NUM_24				= 160'b_0001110000011100_0000000011000000_0001111000000000_0011100000001110_0000000000011100_0111000000011110_0011100000000111_0000001110000000_0111000000001110_0000000111000000	;
	parameter		[0:159]		p_NUM_25				= 160'b_0001111000111100_0000000011000000_0011110000000000_0001111000111100_0000000000011100_0011100000111100_0001111000011110_0000011100000000_0011110000011110_0000001110000000	;
	parameter		[0:159]		p_NUM_26				= 160'b_0000111111111000_0000000011000000_0011111111111110_0001111111111100_0000000000011100_0011111111111000_0001111111111100_0000011100000000_0011111111111100_0000001110000000	;
	parameter		[0:159]		p_NUM_27				= 160'b_0000011111110000_0000000011000000_0011111111111110_0000011111110000_0000000000011100_0000111111110000_0000011111111000_0000011100000000_0000111111111000_0000011100000000	;
	parameter		[0:159]		p_NUM_28				= 160'b_0000000011000000_0000000000000000_0000000000000000_0000000010000000_0000000000000000_0000001110000000_0000000011000000_0000000000000000_0000000111000000_0000111000000000	;
	parameter		[0:159]		p_NUM_29				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_30				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;
	parameter		[0:159]		p_NUM_31				= 160'b_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000	;



// =============================================================================
// Defination of Internal Signals
// =============================================================================
	reg							r_COVER					= 1'b0				;
	reg				[23:0]		r_VGA_BUF_RGB			= 24'h00_00_00		;

	wire						w_IN_POSTION			= ( (POSITION_Y <= CURRENT_Y) 
														&& (CURRENT_Y < POSITION_Y + p_NUM_Y) 
														&& (POSITION_X <= CURRENT_X) 
														&& (CURRENT_X < POSITION_X + p_NUM_X) ) ? 1'b1 : 1'b0;



// =============================================================================
// RTL Body
// =============================================================================
	assign						COVER					= r_COVER			;
	assign						VGA_BUF_RGB				= r_VGA_BUF_RGB		;
	


	always @(posedge VGA_CLK or negedge RST_N) begin
		if (RST_N == 1'b0) begin
			r_COVER			<= 1'b0;
			r_VGA_BUF_RGB	<= 24'h00_00_00;
		end else begin
			if ((ENABLE) && (w_IN_POSTION == 1'b1)) begin
				case (CURRENT_Y)
					(POSITION_Y + 11'd00):	r_COVER	<= p_NUM_00[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd01):	r_COVER	<= p_NUM_01[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd02):	r_COVER	<= p_NUM_02[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd03):	r_COVER	<= p_NUM_03[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd04):	r_COVER	<= p_NUM_04[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd05):	r_COVER	<= p_NUM_05[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd06):	r_COVER	<= p_NUM_06[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd07):	r_COVER	<= p_NUM_07[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd08):	r_COVER	<= p_NUM_08[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd09):	r_COVER	<= p_NUM_09[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd10):	r_COVER	<= p_NUM_10[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd11):	r_COVER	<= p_NUM_11[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd12):	r_COVER	<= p_NUM_12[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd13):	r_COVER	<= p_NUM_13[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd14):	r_COVER	<= p_NUM_14[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd15):	r_COVER	<= p_NUM_15[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd16):	r_COVER	<= p_NUM_16[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd17):	r_COVER	<= p_NUM_17[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd18):	r_COVER	<= p_NUM_18[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd19):	r_COVER	<= p_NUM_19[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd20):	r_COVER	<= p_NUM_20[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd21):	r_COVER	<= p_NUM_21[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd22):	r_COVER	<= p_NUM_22[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd23):	r_COVER	<= p_NUM_23[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd24):	r_COVER	<= p_NUM_24[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd25):	r_COVER	<= p_NUM_25[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd26):	r_COVER	<= p_NUM_26[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd27):	r_COVER	<= p_NUM_27[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd28):	r_COVER	<= p_NUM_28[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd29):	r_COVER	<= p_NUM_29[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd30):	r_COVER	<= p_NUM_30[CURRENT_X - POSITION_X + (NUMBER << 4)];
					(POSITION_Y + 11'd31):	r_COVER	<= p_NUM_31[CURRENT_X - POSITION_X + (NUMBER << 4)];
					default:				r_COVER <= 1'b0;
				endcase
				r_VGA_BUF_RGB	<= 24'hff_ff_ff;
			end else begin
				r_COVER			<= 1'b0;
				r_VGA_BUF_RGB	<= 24'h00_00_00;
			end
		end
	end



endmodule
