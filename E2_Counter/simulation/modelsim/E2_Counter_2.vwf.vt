// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/06/2020 03:52:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          E2_Counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module E2_Counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg en_SW;
reg modulo_SW;
reg rst_N;
// wires                                               
wire LED;
wire [20:0] digital_tube_3b;

// assign statements (if any)                          
E2_Counter i1 (
// port map - connection between master ports and signals/registers   
	.LED(LED),
	.clk(clk),
	.digital_tube_3b(digital_tube_3b),
	.en_SW(en_SW),
	.modulo_SW(modulo_SW),
	.rst_N(rst_N)
);
initial 
begin 
#10000000 $stop;
end 

// clk
initial
begin
	repeat(333)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// modulo_SW
initial
begin
	modulo_SW = 1'b1;
end 

// en_SW
initial
begin
	en_SW = 1'b1;
end 

// rst_N
initial
begin
	rst_N = 1'b1;
end 
endmodule

