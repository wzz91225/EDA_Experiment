// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/06/2020 07:37:00"
                                                                                
// Verilog Test Bench template for design : E3_Sequence
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module E3_Sequence_vlg_tst();

// test vector input registers
reg clk;
reg rst_n;
// wires                                               
wire LED_seq_equal;
wire [4:0]  LED_seq_in;
wire LED_seq_out;

// assign statements (if any)                          
E3_Sequence i1 (
// port map - connection between master ports and signals/registers   
	.LED_seq_equal(LED_seq_equal),
	.LED_seq_in(LED_seq_in),
	.LED_seq_out(LED_seq_out),
	.clk(clk),
	.rst_n(rst_n)
);

initial
begin
	clk		<= 1'b0;
	rst_n	<= 1'b1;
	#100;
	rst_n	<= 1'b0;
	#100;
	rst_n	<= 1'b1;
end

always #10
begin
	clk		<=~clk;
end

endmodule

